# -*- coding: utf-8 -*-
"""hand_written_digits.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pvpt6bkUKMlRURoqiL2HkUkSPERz4YNp
"""

import tensorflow as tf

mnist = tf.keras.datasets.mnist
(X_train, y_train), (X_test, y_test) = mnist.load_data()

#normalize data set
X_train = tf.keras.utils.normalize(X_train, axis= 1)
X_test = tf.keras.utils.normalize(X_test, axis= 1)

#Neural Network Model
model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten(input_shape= (28, 28)))
model.add(tf.keras.layers.Dense(128, activation= 'relu'))
model.add(tf.keras.layers.Dense(128, activation= 'relu'))
model.add(tf.keras.layers.Dense(10, activation= 'softmax'))

#Compilation of the Model
model.compile(optimizer= 'adam',
              loss= 'sparse_categorical_crossentropy',
              metrics= ['accuracy'])
#train the model
model.fit(X_train, y_train, epochs= 3)

# evaluate
loss, accuracy = model.evaluate(X_test, y_test)

model.save('handwrittendigit.model')

!pip install streamlit

import os
import cv2
import numpy as np
import tensorflow as tf


from PIL import Image

import tempfile

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# # function 1 : to classify the image
# def classify_digit(model, image):
#     img = cv2.imread(image)[:,:,0]
#     img = np.invert(np.array([img]))
#     prediction = model.predict(img)
#     return prediction
# 
# # function 2 : to resize the image
# def resize_image(image, target_size):
#     img = Image.open(image)
#     resized_image = img.resize(target_size)
#     return resized_image
# 
# 
# # page name
# st.set_page_config('Digit Recognition', page_icon= 'ðŸ”¢')
# 
# # example of the title, markdown, etc
# st.title('Handwritten Digit Recognition ðŸ”¢')
# st.caption('by Gethara:)')
# 
# st.markdown(r'''This simple application is designed to recognize a number from 0-9 from a PNG file with a resolution of 28x28 pixels.
#             While it may not achieve 100% accuracy, but its performance is consistently high.''')
# st.subheader('Have fun giving it a try!!! ðŸ˜Š')
# 
# uploaded_image = st.file_uploader('Insert a picture of a number from 0-9', type= 'png')
# 
# if uploaded_image is not None:
# 
#     image_np = np.array(Image.open(uploaded_image))
# 
#     temp_image_path = os.path.join(tempfile.gettempdir(), 'temp_image.png')
#     cv2.imwrite(temp_image_path, image_np)
# 
#     resized_image = resize_image(uploaded_image, (300, 300))
# 
#     col1, col2, col3 = st.columns(3)
#     # Placing the image in the second column will ensure it is displayed in the center of the application.
#     with col2:
#         st.image(resized_image)
# 
#     # here we make a button to predict the image
#     submit = st.button('Predict')
#     if submit:
#   # load the model
#        model = tf.keras.models.load_model('handwrittendigit.model')
#   # use the model to predict new image
#        prediction = classify_digit(model, temp_image_path)
#        st.subheader('Prediction Result')
#   # Using np.argmax(prediction) will reveal the number with the highest probability as predicted by our model
#        st.success(f'The digit is probably a {np.argmax(prediction)}')
#     os.remove(temp_image_path)

!npm install localtunnel

import urllib
print("Password/Enpoint IP for localtunnel is:",urllib.request.urlopen('https://ipv4.icanhazip.com').read().decode('utf8').strip("\n"))

!streamlit run /content/app.py &>/content/logs.txt &

!npx localtunnel --port 8501